geom_point() +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut, pch = ".")) +
geom_point() +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut, pch = "*")) +
geom_point() +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = "*") +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = "*",size=3) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=3) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut, alpha=0.2)) +
geom_point(pch = ".",size=6) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut, alpha=0.2)) +
geom_point(pch = ".",size=10) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=10, alpha=0.2) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=1, alpha=0.2) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
?geom_point
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=1, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=1, alpha=0.1) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=100, alpha=0.1) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=100, alpha=0.1) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=4, alpha=0.1) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=4, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=10, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch = ".",size=20, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(size=1, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(size=2, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(size=0.5, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(size=0.75, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch="o", size=0.75, alpha=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point(pch="o", size=1.0, alpha=0.75) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(pch="o", size=1.0, alpha=0.75) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(pch="o", size=1.0, alpha=0.75) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(pch="o", size=1.0,) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(pch="o", size=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(shape="o", size=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(shape=21, size=1.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col = cut, fill=cut)) +
geom_point(shape=21, size=2.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=2.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, col="none" fill=cut)) +
ggplot(head(diamonds), aes(x = carat, y = price, col="none", fill=cut)) +
geom_point(shape=21, size=2.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=2.0) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=2.0,col="none") +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(head(diamonds), aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=2.0,col="#00000000") +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=2.0,col="#00000000") +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=2.0,col="#00000000",alpha=0.1) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=1.0,col="#00000000",alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=1.5,col="#00000000",alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
7/4
pdf(width= 7, height = 4)
ggplot(diamonds, aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=1.5,col="#00000000",alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
dev.off()
pdf
savePlot()
ggplot(diamonds, aes(x = carat, y = price, fill=cut)) +
geom_point(shape=21, size=1.5,col="#00000000",alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few() + savePlot()
dev.off()
ggsave("plot.pdf")
ggsave("C:/Users/Jacob/classes/plot.pdf")
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
geom_point(shape=19, size=1.5,alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few() + savePlot
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
geom_point(shape=19, size=1.5,alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggsave("C:/Users/Jacob/classes/plot.pdf")
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
geom_point(shape=19, size=0.5,alpha=0.5) +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggsave("C:/Users/Jacob/classes/plot.pdf")
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
#geom_point(shape=19, size=0.5,alpha=0.5) +
geom_density() +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
#geom_point(shape=19, size=0.5,alpha=0.5) +
geom_density2d() +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggsave("C:/Users/Jacob/classes/plot.pdf")
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
geom_point(shape=19, size=0.5,alpha=0.5) +
#geom_density2d() +
facet_wrap(~clarity) + scale_color_brewer(type="qual") + ggthemes::theme_few()
ggplot(diamonds, aes(x = carat, y = price, col=cut)) +
geom_point(shape=19, size=0.5,alpha=0.5) +
#geom_density2d() +
facet_wrap(~clarity) + ggthemes::theme_few()
ggsave("C:/Users/Jacob/classes/plot.pdf")
install.packages("simr")
colnames(d)
?colnames
View(d)
View(d)
colnames(d)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
d
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
read.csv()
d <- read.csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
colnames(d)
count
length
ggplot(x=decision) + geom_histogram()
library(ggplot2)
library(dplyr)
ggplot(x=decision) + geom_histogram()
ggplot(d,x=decision) + geom_histogram()
ggplot(d,aes(x=decision)) + geom_histogram()
ggplot(d,aes(x=decision)) + geom_histogram(stat="count")
d %>% group_by(country,decision) %>% summarize()
d %>% group_by(country) %>% summarize(percent = sum(decision==accept)/length(decision))
d %>% group_by(country) %>% summarize(percent = sum(decision=="accept")/length(decision))
d %>% group_by(country) %>% summarize(percent = sum(decision=="accept"))
d %>% group_by(country) %>% summarize(percent = count(decision=="accept"))
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_grid(~equal)
d %>% group_by(country) %>% summarize(percent = table(decision))
d %>% group_by(country)
d %>% group_by(country) %>% table(accept)
()
d %>% group_by(country) %>% table
d %>% group_by(country) %>% summarize(count = n(decision))
d %>% group_by(country) %>% summarize(count = n())
d %>% group_by(country, decision) %>% summarize(count = n())
d %>% group_by(country, decision, eq.uneq) %>% summarize(count = n())
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_grid(~equal)
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_wrap(~equal)
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_wrap(~eq.uneq)
d <- d %>% filter(eq.uneq != "NA")
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_wrap(~eq.uneq)
d <- d %>% filter(eq.uneq != "NA",decision != "NA")
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_wrap(~eq.uneq)
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_grid(country~eq.uneq)
d %>% group_by(country, eq.uneq) %>% summarize(frac = mean(decision="accept"))
d %>% group_by(country, eq.uneq) %>% summarize(frac = mean(decision=="accept"))
d %>% group_by(country, eq.uneq, age) %>% summarize(frac = mean(decision=="accept"))
colnames()
colnames(d)
d %>% group_by(country, eq.uneq, actor.age.years) %>% summarize(frac = mean(decision=="accept"))
ggplot(aes(x=actor.age.years, y=frac)) + geom_smooth
ggplot(d,aes(x=actor.age.years, y=frac)) + geom_smooth
ggplot(d,aes(x=actor.age.years, y=frac)) + geom_smooth()
d <- d %>% filter(eq.uneq != "NA",decision != "NA")
ggplot(d,aes(x=decision)) + geom_histogram(stat="count") + facet_grid(country~eq.uneq)
d %>% group_by(country, eq.uneq, actor.age.years) %>% summarize(frac = mean(decision=="accept"))
colnames(d)
ggplot(d,aes(x=actor.age.years, y=frac)) + geom_smooth()
d <- d %>% group_by(country, eq.uneq, actor.age.years) %>% summarize(frac = mean(decision=="accept"))
ggplot(d,aes(x=actor.age.years, y=frac)) + geom_smooth()
ggplot(d,aes(x=actor.age.years, y=frac)) + geom_point()
ggplot(d,aes(x=actor.age.years, y=frac, col=country)) + geom_point()
ggplot(d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth()
ggplot(d,aes(x=actor.age.years, y=frac)) + geom_smooth() + geom_point() + facet_wrap(~country)
ggplot(d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth() + geom_point() + facet_wrap(eq.uneq)
d <- d %>% group_by(country, eq.uneq, actor.age.years, trial_type) %>% summarize(frac = mean(decision=="accept"))
d <- d %>% filter(eq.uneq != "NA",decision != "NA")
```{r}
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read.csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
?geom_smooth()
?geom_line()
?geom_smooth()
frac_d <- filter_d %>% group_by(country, eq.uneq, actor.age.years, trial_type) %>% summarize(frac = mean(decision=="accept"))
filter_d <- d %>% filter(eq.uneq != "NA",decision != "NA")
frac_d <- filter_d %>% group_by(country, eq.uneq, actor.age.years, trial_type) %>% summarize(frac = mean(decision=="accept"))
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth() + geom_point() + facet_wrap(eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth() + geom_point() + facet_wrap(~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se="FALSE") + geom_point() + facet_wrap(~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + geom_point() + facet_wrap(~eq.uneq)
frac_d <- filter_d %>% group_by(country, eq.uneq, actor.age.years, trial_type) %>% summarize(frac = 1-mean(decision=="accept"))
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + geom_point() + facet_wrap(~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + facet_wrap(~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + facet_wrap(trial_type~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + facet_grid(trial_type~eq.uneq)
View(d)
View(d)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + facet_grid(value~eq.uneq)
frac_d <- filter_d %>% group_by(country, eq.uneq, actor.age.years, trial_type,value) %>% summarize(frac = 1-mean(decision=="accept"))
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + facet_grid(value~eq.uneq)
frac_d <- filter_d %>% group_by(country, eq.uneq, actor.age.years, condition) %>% summarize(frac = 1-mean(decision=="accept"))
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_smooth(se=FALSE) + facet_grid(condition~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_point() + facet_grid(condition~eq.uneq)
d
d %>% ggplot(aes(x=actor.age.years))
+ geom_hist()
d %>% ggplot(aes(x=actor.age.years)) + geom_histogram()
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_line() + facet_grid(condition~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_line() + facet_grid(condition~eq.uneq)
frac_d <- filter_d %>% group_by(country, eq.uneq, actor.age.years, condition) %>% summarize(frac = mean(decision=="accept"))
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_line() + facet_grid(condition~eq.uneq)
ggplot(frac_d,aes(x=actor.age.years, y=frac, col=country)) + geom_line() + facet_grid(eq.uneq~condition)
simr
library(simr)
?`simr-package`
setpwd
??pwd
setpwd
change_pwd
cd("C:/Users/jacob/classes/jakesch2019/writeup/")
setwd("C:/Users/jacob/classes/jakesch2019/writeup/")
??wd
responses <- read.csv(file="pilot_b_data_2_responses.csv") %>%
# filter out the Qualtrics header info lines
# select only the columns needed for the confirmatory analysis
filter(!between(row_number(),1,2)) %>%
# filter out participants who did not consent
# or who revoked consent after the debrief
# or who failed one of the two attention check questions
filter(
Consent == 'I CONSENT to take part in the study.',
debrief_agree == "I AGREE that the data collected during the study may be included for the purpose of the study.",
att_check_1 == "John is easy to see.",
att_check_2 == "I am traveling and the person in the profile offers to host me.",
(ai_comprehension == "Some were generated by the AI system, some were written by the host." | ai_comprehension == "")
) %>%
select(contains("profile_trust"), -contains("ai_score"), c("ResponseId"))
getwd()
ls
ls()
ls(getwd())
setwd("/Users/jacob/classes/jakesch2019/writeup")
ls(getwd())
setwd("/Users/jacob/classes/jakesch2019/writeup")
getwd
getwd()
setwd("/Users/jacob/classes/jakesch2019/writeup")
setwd("/Users/jacob/classes/jakesch2019/writeup2")
setwd("/Users/jacob/classes/jakesch2019/writeup")
getwd()
ls(getwd())
responses <- read.csv(file="pilot_b_data_2_responses.csv")
getwd()
1 + 1
.Last.Command
.Last.value
model = lme(meanScore ~ ai * condition, random=~ 1|ResponseId,data=processed_data)
model_80_power <- extend(model, along="subject", n=150)
powerSim(model_80_power, nsim=200, test = fixed("type:condition",method="anova"))
########################################################################
##
## Original Code by Maurice Jakesch
## Power Analysis Code by Jacob Ritchie
## November 17, 2019
##
########################################################################
########################################################################
##
## ANALYSES AND GRAPHS
##
## AI-Mediated Communication: How Profile Generation by AI Affects
## Perceived Trustworthiness. Forthcoming in Proceedings of the 2019
## CHI Conference on Human Factors in Computing Systems. ACM.
## Jakesch, M., French, M., Ma, X., Hancock, J.T. & Naaman, M.
##
## Created by Maurice Jakesch
## Version: 20 December 2018
##
########################################################################
# Load packages
library(ggplot2)
library(RColorBrewer)
library(stats)
library(nlme)
library(psy)
library(MuMIn)
library(Rmisc)
library(tidyverse)
library(simr)
#####################################################################################
#####################################################################################
###################################### STUDY 3 ######################################
#####################################################################################
#####################################################################################
## Load data
data_3 = read.csv('data_study3.csv')
data_3 <- data_3[-c(1, 2),] # Remove metadata
data_3 <- data_3[data_3$Finished == TRUE,]
## Convert data types
data_3[] <- lapply(data_3, gsub, pattern = "Highly confident  100%", replacement = "100")
data_3[] <- lapply(data_3, gsub, pattern = "Not confident 0%", replacement = "0")
data_3[] <- lapply(data_3, gsub, pattern = "Strongly agree 100%", replacement = "100")
data_3[] <- lapply(data_3, gsub, pattern = "Strongly disagree 0%", replacement = "0")
data_3[] <- lapply(data_3, gsub, pattern = "Definitely human-written1", replacement = "1")
data_3[] <- lapply(data_3, gsub, pattern = "Definitely A.I.-generated6", replacement = "6")
temp <- c(sprintf("General_%s",seq(1:3)), sprintf("Attitude_%s",seq(1:4)), 'Birthyear',
sprintf("X%s_P1_T_Page.Submit",seq(1:10)), sprintf("ProfileID_%s",seq(1:10)))
data_3[temp] <- sapply(data_3[,temp], function(x) {as.numeric(x)})
for (i in seq(1:10)){
data_3[,sprintf("rating_%s", i)] <- rowMeans(sapply(data_3[,sprintf("X%s_R%s",i,seq(1:3))], function(x) {as.numeric(x)}))
data_3[,sprintf("aiscore_%s", i)] <- rowMeans(sapply(data_3[,sprintf("X%s_AI",i,seq(1:3))], function(x) {as.numeric(x)}))
}
## Rename groups (we changed their names throughout the project)
data_3$condition <- gsub("uncertainty", "unlabeled", data_3$condition)
data_3$condition <- gsub("expectation", "labeled", data_3$condition)
data_3$condition <- gsub("problematize", "primed", data_3$condition)
## User level stats
data_3$subject <- rownames(data_3)
data_3$Attitude_3_R <- 100 - data_3$Attitude_3 # Inverse code
data_3$Attitude_4_R <- 100 - data_3$Attitude_4 # Inverse code
data_3$general <- rowMeans(data_3[,sprintf("General_%s",seq(1:3))]) # General trust index
data_3$attitude <- rowMeans(data_3[,c('Attitude_1', 'Attitude_2', 'Attitude_4_R')]) # General attitude index
data_3$rating_mean <- rowMeans(data_3[,sprintf("rating_%s",seq(1:10))])
data_3$rating_sd <- transform(data_3[,sprintf("rating_%s",seq(1:10))], SD=apply(data_3[,sprintf("rating_%s",seq(1:10))],1, sd, na.rm = TRUE))$SD
data_3$time_median <- apply(data_3[,sprintf("X%s_P1_T_Page.Submit",seq(1:10))], 1, median)
data_3$age <- 2018 - data_3$Birthyear
mean(data_3$age, na.rm = TRUE)
table(data_3$Gender)/nrow(data_3)
# Exclusions based on response stats (clickthrough)
mask <- data_3$rating_mean < mean(data_3$rating_mean) + 2 * sd(data_3$rating_mean) & data_3$rating_mean > mean(data_3$rating_mean) - 2 * sd(data_3$rating_mean)
mask <- mask & data_3$rating_sd < mean(data_3$rating_sd) + 2 * sd(data_3$rating_sd) & data_3$rating_sd > mean(data_3$rating_sd) - 2 * sd(data_3$rating_sd)
mask <- mask & data_3$rating_sd >= 5
mask <- mask & data_3$time_median >= 5
data_3 <- data_3[mask,]
## Exclusions based on scenario understanding
data_3 <- data_3[data_3$Val_1 == 'John is easy to see.',]
data_3 <- data_3[data_3$Val_2 == 'I am traveling and the person in the profile offers to host me.',]
#data_3 <- data_3[data_3$Val_3 == 'Some were generated by the AI system, some were written by the host.' | data_3$Val_3 == '',] # at beginning
#data_3 <- data_3[data_3$Val_4 == 'Some were generated by the AI system, some were written by the host.' | data_3$Val_4 == '',] # at end
#data_3 <- data_3[data_3$Demo_Fail == '',] # no exclusions based on free-form
323-nrow(data_3)
# Convert to long and compute cronbach's alpha
data_3l <- reshape(data_3,
varying = list(sprintf("rating_%s",seq(1:10)), sprintf("aiscore_%s",seq(1:10)),
sprintf("X%s_P1_T_Page.Submit",seq(1:10)), sprintf("ProfileID_%s",seq(1:10)),
sprintf("X%s_R1",seq(1:10)), sprintf("X%s_R2",seq(1:10)), sprintf("X%s_R3",seq(1:10))),
timevar = c("order"),
times = seq(1,10),
v.names = c('rating', 'aiscore', 'time', 'profile', 'rating_1', 'rating_2', 'rating_3'),
direction = "long")
data_3l$type <- ifelse(data_3l$profile <= 15, 'ai', 'human')
data_3l[c('rating_1', 'rating_2', 'rating_3')] <- sapply(data_3l[c('rating_1', 'rating_2', 'rating_3')], function(x) {as.numeric(x)})
# Basic stats
cronbach(data_3l[,c('rating_1', 'rating_2', 'rating_3')])
summarySE(data_3l, 'rating')
# Plot 3-1: Absolute differences between groups and profiles
plot_d31 <- summarySE(data_3l, 'rating', groupvars = c('type','condition'))
# Unfortunately, the CRAN summarySEwithin produces faulty results. As a work-around, and based on its functioning
# (see http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/), we compute SE & CI
# based on data that's normalized by subjects' mean rating to account for the repeated measures per subject
data_3l$normed_rating <- data_3l$rating - data_3l$rating_mean
plot_d31_within <- summarySE(data_3l, 'normed_rating', groupvars = c('type','condition'))
plot_d31 <- merge(plot_d31[,c("type","condition","N","rating")],plot_d31_within[,c("type","condition","sd","se","ci")],by=c("type","condition"))
plot_d31$type <- revalue(plot_d31$type, c( "human"='"Human"', "ai"='"AI"'))
plot_d31$type <- factor(plot_d31$type, levels = c( '"Human"', '"AI"'))
plot_d31$condition <- revalue(plot_d31$condition, c( "control"="Control", "labeled"="Labeled", "unlabeled"='Unlabeled', 'primed'='Primed'))
plot_d31$condition <- factor(plot_d31$condition, levels = c('Control', 'Unlabeled', 'Labeled', 'Primed'))
pd <- position_dodge(0.25)
sh <- c(15, 19, 15, 19, 15, 19, 15, 19)
sh <- c(19, 15, 19, 15, 19, 15, 19, 15)
ggplot(plot_d31, aes(x=condition, y=rating, colour=type, group=type)) + #geom_line(position=pd) +
geom_errorbar(aes(ymin=rating-ci, ymax=rating+ci), colour="black", width=.2, position=pd) +
geom_point(position=pd, shape = sh, size  = 4) + theme_bw(base_size = 15) + xlab('Condition') + ylab('Mean trustworthiness') +
theme(legend.position="top", legend.box = "horizontal", legend.box.margin=margin(0,0,-10,0), legend.background=element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 10, r = 20, b = 0, l = 0))) +
labs(color='Profile type') +  scale_color_manual(values=colors)
summarySE(data_3l, 'rating', groupvars = c('condition'))
plot_d31
# Plot 3-2: Primed group only -- profile ratings over AI scores
plot_d32 <- summarySE(data_3l[data_3l$condition == 'primed',], 'rating', groupvars = c('aiscore'))
# Unfortunately, the CRAN summarySEwithin produces faulty results. As a work-around, and based on its functioning
# (see http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/), we compute SE & CI
# based on data that's normalized by subjects' mean rating to account for the repeated measures per subject
plot_d32_within <- summarySE(data_3l[data_3l$condition == 'primed',], 'normed_rating', groupvars = c('aiscore'))
plot_d32 <- merge(plot_d32[,c("N","rating","aiscore")],plot_d32_within[,c("aiscore","sd","se","ci")],by=c("aiscore"))
plot_d32$aiscore_r <- revalue(factor(plot_d32$aiscore), c("1"="1\nDefinitely\nhuman-written", "2"="2", "3"="3", "4"="4", "5"="5", "6"="6\nDefinitely\nAI-generated"))
ggplot(plot_d32, aes(x=aiscore_r, y=rating)) +
geom_errorbar(aes(ymin=rating-ci, ymax=rating+ci), colour="black", width=.2, position=pd) + geom_line(aes(x = aiscore, color = aiscore)) +
geom_point(aes(x = aiscore, color = aiscore), shape = 19, size  = 4) + theme_bw(base_size = 15) + xlab('AI score') +
ylab('Mean trustworthiness') + theme(axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)))+guides(colour=FALSE) +
scale_colour_gradientn(colours = colorRampPalette(colors)(100), limits=c(1, 6), breaks=c(1.2, 2.73, 4.266, 6))
# Analysis 3-1:
aov_3 <- aov(rating ~ condition * type + Error(subject), data=data_3l)
summary(aov_3)
# Analysis 3-2:
data_3l$type <- factor(data_3l$type, levels = c('human', 'ai'))
lme_31 <- lm(rating ~ type * condition, data=data_3l)
summary(lme_31)
lme_32 <- lme(rating ~ type * condition, random=~ 1|subject, data=data_3l)
anova(lme_32)
summary(lme_32)
#####################################################################################
#####################################################################################
###################################### Power Analysis  ##############################
#####################################################################################
#####################################################################################
small_data_3l = data_3l %>% filter(condition == "control" | condition == "primed")
lme_32 <- lme(rating ~ type * condition, random=~ 1|subject, data=small_data_3l)
model <- makeLmer(rating ~ type * condition + (1|subject),
VarCorr = c(11.8637 ** 2),
fixef=c(69.32142857,1.80952381,0.08882784,-4.97619048),
sigma=12.21032, data=small_data_3l)
# Original sample size (108 total participants after exclusions -- gives 90% power)
powerSim(model, nsim=200, test = fixed("type:condition",method="anova"))
model_80_power <- extend(model, along="subject", n=150)
powerSim(model_80_power, nsim=200, test = fixed("type:condition",method="anova"))
model_80_power <- extend(model, along="subject", n=140)
powerSim(model_80_power, nsim=1000, test = fixed("type:condition",method="anova"))
model_80_power <- extend(model, along="subject", n=120)
powerSim(model_80_power, nsim=500, test = fixed("type:condition",method="anova"))
model_80_power <- extend(model, along="subject", n=130)
powerSim(model_80_power, nsim=500, test = fixed("type:condition",method="anova"))
model_80_power <- extend(model, along="subject", n=130)
powerSim(model_80_power, nsim=4000, test = fixed("type:condition",method="anova"))
